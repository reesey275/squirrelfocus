name: AI Build

on:
  pull_request:
  issues:

jobs:
  automate:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      - uses: actions/setup-python@v5
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          python-version: '3.12'
      - name: Cache pipx & Poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/pipx
            ~/.cache/pipx
            ~/.local/bin
            ~/.cache/pypoetry
          key: pipx-${{ runner.os }}-poetry-1.8.3
      - name: Install Poetry (robust, no curl | python)
        id: poetry
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          POETRY_VERSION: "1.8.3"
        run: |
          set -euo pipefail
          if ! curl -fsS https://pypi.org/ -o /dev/null; then
            printf 'online=0\n' >> "$GITHUB_OUTPUT"
            printf 'poetry_available=0\n' >> "$GITHUB_OUTPUT"
            printf 'Poetry install skipped: offline.\n' \
              | tee -a "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          printf 'online=1\n' >> "$GITHUB_OUTPUT"
          if command -v poetry >/dev/null 2>&1; then
            poetry --version | tee -a "$GITHUB_STEP_SUMMARY"
            printf 'poetry_available=1\n' >> "$GITHUB_OUTPUT"
            exit 0
          fi
          retry() {
            n=0
            until "$@"; do
              n=$((n+1))
              [ $n -ge 3 ] && return 1
              sleep $((5*n))
            done
          }
          python -m pip install --user --upgrade pip >/dev/null
          retry python -m pip install --user pipx >/dev/null || true
          python -m pipx ensurepath || true
          if ! retry python -m pipx install \
              "poetry==${POETRY_VERSION}"; then
            printf 'pipx path failed; falling back to user-site pip\n'
            python -m pip install --user "poetry==${POETRY_VERSION}"
          fi
          printf '%s\n' "$HOME/.local/bin" >> "$GITHUB_PATH"
          if command -v poetry >/dev/null 2>&1; then
            poetry --version | tee -a "$GITHUB_STEP_SUMMARY"
            printf 'poetry_available=1\n' >> "$GITHUB_OUTPUT"
          else
            printf 'poetry_available=0\n' >> "$GITHUB_OUTPUT"
            printf 'Poetry not available after install attempts.\n' \
              | tee -a "$GITHUB_STEP_SUMMARY"
          fi
      - name: Sync lockfile if stale
        if: steps.poetry.outputs.poetry_available == '1'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euxo pipefail
          poetry --version
          poetry lock --no-interaction --no-update \
            || poetry lock --no-interaction
      - name: Install dependencies
        if: steps.poetry.outputs.poetry_available == '1'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: poetry install --no-root --no-interaction
      - name: Run sf ask
        if: steps.poetry.outputs.poetry_available == '1'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          QUESTION: >-
            ${{ github.event.pull_request.title || github.event.issue.title }}
        run: "poetry run sf ask \"$QUESTION\" || true"
      - name: Fallback without Poetry (non-fatal)
        if: steps.poetry.outputs.poetry_available != '1'
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then
            printf 'Poetry missing; installing with pip as a fallback...\n' \
              | tee -a "$GITHUB_STEP_SUMMARY"
            python -m pip install -r requirements.txt || true
          else
            printf 'No requirements.txt present; nothing to do.\n' \
              | tee -a "$GITHUB_STEP_SUMMARY"
          fi
